{"version":3,"sources":["account.svg","subcomponents/DataPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DataPanel","props","react_default","a","createElement","className","count","name","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","start_date","end_date","access_token","error","total_numbers","daily_numbers","paginated","current_page","max_page","changeStart","bind","assertThisInitialized","changeEnd","changeToken","submitQuery","changePage","event","setState","target","value","localStorage","setItem","_this2","trim","length","axios","get","concat","process","headers","X-Gi-Token","then","response","data","response2","by_date","catch","status","request","message","preventDefault","page_num","_this3","getItem","_this4","onSubmit","type","onChange","placeholder","src","account_img","alt","src_subcomponents_DataPanel","total_conversation_count","total_user_message_count","total_visitor_message_count","JSON","stringify","toConsumableArray","Array","keys","slice","map","key","onClick","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a29e187c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/account.bad2829d.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './DataPanel.scss'\r\n\r\nconst DataPanel = props => (\r\n  <div className=\"DataPanel\">\r\n    <p className=\"DataPanel__count\">{props.count}</p>\r\n    <p className=\"DataPanel__name\">{props.name}</p>\r\n  </div>\r\n);\r\n\r\nDataPanel.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  count: PropTypes.number.isRequired\r\n};\r\n\r\nexport default DataPanel;","import React, { Component } from 'react';\nimport './scss-common/DateControl.scss';\nimport './scss-common/MediaObject.scss';\nimport './scss-common/PagingBtn.scss';\nimport './App.scss';\nimport account_img from './account.svg'\nimport DataPanel from \"./subcomponents/DataPanel\";\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      start_date: '',\n      end_date: '',\n      access_token: '',\n      error: '',\n      total_numbers: null,\n      daily_numbers: null,\n      paginated: false,\n      current_page: 1,\n      max_page: 1\n    };\n    this.changeStart = this.changeStart.bind(this);\n    this.changeEnd = this.changeEnd.bind(this);\n    this.changeToken = this.changeToken.bind(this);\n    this.submitQuery = this.submitQuery.bind(this);\n    this.changePage = this.changePage.bind(this);\n  }\n  changeStart(event) {\n    this.setState({start_date: event.target.value});\n    localStorage.setItem('start_date', event.target.value);\n  }\n  changeEnd(event) {\n    this.setState({end_date: event.target.value});\n    localStorage.setItem('end_date', event.target.value);\n  }\n  changeToken(event) {\n    this.setState({access_token: event.target.value});\n    localStorage.setItem('access_token', event.target.value);\n  }\n  submitQuery(event) {\n    if (this.state.start_date.trim().length === 0) {\n      this.setState({error: 'Start date is required field'});\n    } else if (this.state.end_date.trim().length === 0) {\n      this.setState({error: 'End date is required field'});\n    } else if (this.state.access_token.trim().length === 0) {\n      this.setState({error: 'Access token is required field'});\n    } else {\n      this.setState({error: ''});\n      axios.get(\n        `${process.env.REACT_APP_API_ROOT}/reporting/v1/total/from-${this.state.start_date}/to-${this.state.end_date}/`,\n        {headers: {'X-Gi-Token': this.state.access_token}}\n      )\n        .then((response) => {\n          this.setState({total_numbers: response.data});\n          // Technically this SHOULD be in axios.all([]).then(axios.spread(... etc. but im running against time so nah\n          // SHOULD == it would load concurrently as opposed to (like below) sequentially, also more pretty\n          axios.get(\n            `${process.env.REACT_APP_API_ROOT}/reporting/v1/daily/from-${this.state.start_date}/to-${this.state.end_date}/`,\n            {headers: {'X-Gi-Token': this.state.access_token}}\n          )\n            .then((response2) => {\n              this.setState({\n                daily_numbers: response2.data.by_date,\n                paginated: response2.data.paginated,\n                current_page: 1, // Always initially 1st page at first\n                max_page: response2.data.max_page\n              });\n            })\n            .catch((error) => {\n              if (error.response.status === 404) {\n                this.setState({error: 'Invalid start- or end-date'});\n              } else if (error.response) {\n                this.setState({error: error.response.data});\n              } else if (error.request) {\n                this.setState({error: error.request});\n              } else {\n                this.setState({error: error.message});\n              }\n            });\n        })\n        .catch((error) => {\n          if (error.response.status === 404) {\n            this.setState({error: 'Invalid start- or end-date'});\n          } else if (error.response) {\n            this.setState({error: error.response.data});\n          } else if (error.request) {\n            this.setState({error: error.request});\n          } else {\n            this.setState({error: error.message});\n          }\n        });\n    }\n    event.preventDefault();\n  }\n  changePage(page_num) {\n    axios.get(\n      `${process.env.REACT_APP_API_ROOT}/reporting/v1/daily/from-${this.state.start_date}/to-${this.state.end_date}/page-${page_num}`,\n      {headers: {'X-Gi-Token': this.state.access_token}}\n    )\n      .then((response2) => {\n        this.setState({\n          daily_numbers: response2.data.by_date,\n          paginated: response2.data.paginated,\n          current_page: response2.data.current_page, // Somewhat redundant (since we have it in page_num), but to assert\n          max_page: response2.data.max_page\n        });\n      })\n      .catch((error) => {\n        if (error.response.status === 404) {\n          this.setState({error: 'Invalid start- or end-date'});\n        } else if (error.response) {\n          this.setState({error: error.response.data});\n        } else if (error.request) {\n          this.setState({error: error.request});\n        } else {\n          this.setState({error: error.message});\n        }\n      });\n  }\n  componentDidMount() {\n    this.setState({\n      start_date: localStorage.getItem('start_date') || '',\n      end_date: localStorage.getItem('end_date') || '',\n      access_token: localStorage.getItem('access_token') || ''\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Header panel */}\n        <header className=\"App__header\">\n          Backend test UI\n        </header>\n\n        {/* Main controls, to query API */}\n        <form className=\"App__controls\" onSubmit={this.submitQuery}>\n          <div className=\"App__controls-options\">\n            <div className=\"DateControl\">\n              <label>\n                <span className=\"DateControl__label\">Start date</span>\n                <br/>\n                <input className=\"DateControl__input\"\n                       type=\"text\"\n                       value={this.state.start_date}\n                       onChange={this.changeStart}\n                       placeholder=\"YYYY-MM-DD\"\n                />\n              </label>\n            </div>\n            <div className=\"DateControl\">\n              <label>\n                <span className=\"DateControl__label\">End date</span>\n                <br/>\n                <input className=\"DateControl__input\"\n                       type=\"text\"\n                       value={this.state.end_date}\n                       onChange={this.changeEnd}\n                       placeholder=\"YYYY-MM-DD\"\n                />\n              </label>\n            </div>\n          </div>\n          <div className=\"App__controls-auth\">\n            <div className=\"MediaObject\">\n              <img className=\"MediaObject__icon\"\n                   src={account_img}\n                   alt=\"AUTH\"\n              />\n              <input className=\"MediaObject__content\"\n                     type=\"text\"\n                     value={this.state.access_token}\n                     onChange={this.changeToken}\n                     placeholder=\"Access token\"\n              />\n            </div>\n          </div>\n          <br/>\n          <br/>\n          <input className=\"App__controls-submit-btn\"\n                 type=\"submit\"\n                 value=\"Query API\"\n          />\n        </form>\n\n        {/* Errors (if any) */}\n        {this.state.error ?\n          <p className=\"App__error\">{this.state.error}</p>\n          :\n          \"\"\n        }\n\n        {/* Printout from the API result (if any) */}\n        {this.state.total_numbers ?\n          <div className=\"App__total-numbers\">\n            <DataPanel\n              name=\"Total conversation count\"\n              count={this.state.total_numbers.total_conversation_count}\n            />\n            <DataPanel\n              name=\"Total user message count\"\n              count={this.state.total_numbers.total_user_message_count}\n            />\n            <DataPanel\n              name=\"Total visitor messages count\"\n              count={this.state.total_numbers.total_visitor_message_count}\n            />\n          </div>\n          :\n          \"\"\n        }\n\n        {/* Detailed printout with its own sub-controls*/}\n        {this.state.daily_numbers ?\n          <div className=\"App__daily-numbers\">\n            <div>\n              {JSON.stringify(this.state.daily_numbers)}\n            </div>\n            {this.state.paginated ?\n              <div>\n                <p>Goto page</p>\n                {[...Array(this.state.max_page+1).keys()].slice(1).map((page_num) => (\n                  <input className=\"PagingBtn\"\n                         key={page_num}\n                         type=\"button\"\n                         value={page_num}\n                         onClick={(event) => {this.changePage(page_num); event.preventDefault();}}\n                         disabled={page_num === this.state.current_page}\n                  />\n                ))}\n              </div>\n              :\n              <p>\"Only 1 page of results\"</p>\n            }\n          </div>\n          :\n          \"\"\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}